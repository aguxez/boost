defmodule Exboost.Math do
  # Boost Software License - Version 1.0 - August 17th, 2003
  #
  # Permission is hereby granted, free of charge, to any person or organization
  # obtaining a copy of the software and accompanying documentation covered by
  # this license (the "Software") to use, reproduce, display, distribute,
  # execute, and transmit the Software, and to prepare derivative works of the
  # Software, and to permit third-parties to whom the Software is furnished to
  # do so, all subject to the following:
  #
  # The copyright notices in the Software and this entire statement, including
  # the above license grant, this restriction and the following disclaimer,
  # must be included in all copies of the Software, in whole or in part, and
  # all derivative works of the Software, unless such copies or derivative
  # works are solely in the form of machine-executable object code generated by
  # a source language processor.
  #
  # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  # FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  # SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  # FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  # ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  # DEALINGS IN THE SOFTWARE.

  @on_load :init

  def init() do
    :ok = :erlang.load_nif("priv/libboostnif", 0)
    :ok
  end

  @doc """
  Provides the regularized lower incomplete gamma function.
  
  ## Examples

      iex> Exboost.Math.gamma_p(0.234,2.3)
      0.9891753004794075

      iex> Exboost.Math.gamma_p(5.0,0.0)
      0.0

  """
  def gamma_p(a,z), do: _gamma_p(a,z)
  def _gamma_p(_a,_z), do: "NIF library not loaded"

end
